generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model StoreLikes {
  id      Int      @id @default(autoincrement())
  likerId String
  likedId String
  likedAt DateTime @default(now())
  liked   User     @relation("LikesReceived", fields: [likedId], references: [id])
  liker   User     @relation("LikesGiven", fields: [likerId], references: [id])

  @@unique([likerId, likedId])
}

model User {
  id              String                @id @default(cuid())
  email           String                @unique
  password        String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  account_type    AcountType            @default(CUSTOMER)
  role_id         Int
  phone_number    String?
  otp             String?
  firstName       String
  lastName        String
  status          UserStatus            @default(ACTIVE)
  emailVerified   DateTime?
  addresses       Address[]
  carts           Cart?
  image           Image?                @relation("UserImage")
  banner_image    Image?                @relation("BannerUserImage")
  likes           Like[]
  orders          Order[]               @relation("buyerOrders")
  sellerOrders    OrderSellerRelation[]
  products        Product[]
  ProductOnDemand ProductOnDemand[]
  myreviews       Review[]              @relation("myreviews")
  reviews         Review[]
  likesReceived   StoreLikes[]          @relation("LikesReceived")
  likesGiven      StoreLikes[]          @relation("LikesGiven")
  support         Support[]
  role            Role                  @relation(fields: [role_id], references: [role_id])
  vendor          Vendor?
  viewProducts    ViewedProduct[]
  wishlist        Wishlist[]
  accounts        Account[]
  contacts        Contact[] @relation("UserContactsSent")
  contactsReceived Contact[] @relation("UserContactsReceived")
}

model Contact {
  id               Int       @id @default(autoincrement())
  name             String    
  userId           String
  vendorId         String
  email            String  
  phone_number     String  
  message          String
  createdAt        DateTime @default(now())

  sender     User     @relation("UserContactsSent", fields: [userId], references: [id])
  receiver   User     @relation("UserContactsReceived", fields: [vendorId], references: [id])
}


model Address {
  id        Int         @id @default(autoincrement())
  userId    String
  type      AddressType
  firstName String
  lastName  String
  street    String?
  address_2 String?
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  email     String?
  phone     String?
  user      User        @relation(fields: [userId], references: [id])
}

model Role {
  role_id     Int              @id @default(autoincrement())
  role_name   String           @unique
  description String?
  permissions RolePermission[]
  users       User[]
}

model Permission {
  permission_id   Int              @id @default(autoincrement())
  permission_name String           @unique
  description     String?
  created_at      DateTime         @default(now())
  roles           RolePermission[]
}

model RolePermission {
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [permission_id])
  role          Role       @relation(fields: [role_id], references: [role_id])

  @@id([role_id, permission_id])
}

model Product {
  product_id            Int                     @id @default(autoincrement())
  status                ProductStatus           @default(DRAFT)
  user_id               String
  product_name          String
  isOnlineBuyable       Boolean                 @default(false)
  country_id            Int?
  categoryId            Int
  subCategoryId         Int?
  delivery_includes     String?
  offline_reason        String?
  purchase_note         String?
  return_policy         String?
  featured              Boolean                 @default(false)
  labels                String?
  createdAt             DateTime                @default(now())
  likes                 Like[]
  category              Category                @relation("CategoryProducts", fields: [categoryId], references: [category_id])
  country               Country?                @relation(fields: [country_id], references: [country_id])
  subcategory           Category?               @relation("SubCategoryProducts", fields: [subCategoryId], references: [category_id])
  user                  User                    @relation(fields: [user_id], references: [id])
  attributes            ProductAttribute[]
  ProductAttributeValue ProductAttributeValue[]
  productChars          ProductChars[]
  collections           ProductCollection[]
  genders               ProductGender[]
  patterns              ProductPatten[]
  states                ProductState[]
  tags                  ProductTag[]
  variations            ProductVariation[]
  relatedProducts       RelatedProduct[]        @relation("RelatedProducts")
  relatedTo             RelatedProduct[]        @relation("RelatedTo")
  reviews               Review[]
  viewedBy              ViewedProduct[]
  wishlist              Wishlist[]
  Support               Support[]
}

model ViewedProduct {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  product   Product @relation(fields: [productId], references: [product_id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model RelatedProduct {
  id               Int     @id @default(autoincrement())
  productId        Int
  relatedProductId Int
  product          Product @relation("RelatedProducts", fields: [productId], references: [product_id], onDelete: Cascade)
  relatedProduct   Product @relation("RelatedTo", fields: [relatedProductId], references: [product_id], onDelete: Cascade)

  @@unique([productId, relatedProductId])
}

model Support {
  id          Int      @id @default(autoincrement())   
  userId      String
  title       String?
  orderId     Int?                                      
  reasonType  SUPPORTStatus                                  
  reasonText  String?                                  
  status      String?                                   
  createdAt   DateTime  @default(now())                
  productId   Int              
  response    String?

  user        User     @relation(fields: [userId], references: [id])          
  product     Product  @relation(fields: [productId] , references: [product_id])
  order       Order?   @relation(fields: [orderId], references: [id])
}

model Vendor {
  id               Int       @id @default(autoincrement())
  user_id          String    @unique
  store_name       String
  store_url        String?   @unique
  license_number   String?   @unique
  issued_at        String?
  issued_date      DateTime?
  licence_address  String?
  licence_city     String?
  licence_state    String?
  licence_zip_code String?
  licence_country  String?
  account_name     String?
  account_number   String?   @unique
  bank_name        String?
  bank_iban        String?
  bank_swift_code  String?
  bank_address     String?
  bank_city        String?
  bank_zip_code    String?
  bank_country     String?
  expiry_date      DateTime?
  routing_number   String?
  bank_state       String?
  user             User      @relation(fields: [user_id], references: [id])
  
}


model Category {
  category_id         Int       @id @default(autoincrement())
  name                String    @unique
  description         String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  category_image      String?
  parent_id           Int?
  image               Image?
  products            Product[] @relation("CategoryProducts")
  subCategoryProducts Product[] @relation("SubCategoryProducts")
}

model Country {
  country_id Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  region     String
  Product    Product[]
  states     State[]
}

model Tag {
  tag_id      Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  products    ProductTag[]
}

model ProductTag {
  product_id Int
  tag_id     Int
  product    Product @relation(fields: [product_id], references: [product_id])
  tag        Tag     @relation(fields: [tag_id], references: [tag_id])

  @@id([tag_id, product_id])
}

model Attribute {
  attribute_id                  Int                     @id @default(autoincrement())
  name                          String                  @unique
  isRequired                    Boolean                 @default(false)
  isMultiple                    Boolean                 @default(false)
  description                   String?
  created_at                    DateTime                @default(now())
  updated_at                    DateTime                @updatedAt
  useForVariation               Boolean                 @default(false)
  values                        AttributeValue[]
  products                      ProductAttribute[]
  productsProductAttributeValue ProductAttributeValue[]
}

model AttributeValue {
  id                     Int                     @id @default(autoincrement())
  name                   String
  attribute_id           Int
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
  colorCode              String?
  attribute              Attribute               @relation(fields: [attribute_id], references: [attribute_id])
  ProductAttributeValue  ProductAttributeValue[]
  attributeValuePricings attributeValuePricing[]
}

model ProductAttribute {
  product_id   Int
  attribute_id Int
  attribute    Attribute @relation(fields: [attribute_id], references: [attribute_id])
  product      Product   @relation(fields: [product_id], references: [product_id])

  @@id([attribute_id, product_id])
}

model ProductAttributeValue {
  product_id               Int
  attribute_id             Int
  attributeValue_id        Int
  productAttributeValue_id Int                         @id @default(autoincrement())
  attributeValue           AttributeValue              @relation(fields: [attributeValue_id], references: [id])
  attribute                Attribute                   @relation(fields: [attribute_id], references: [attribute_id])
  product                  Product                     @relation(fields: [product_id], references: [product_id])
  productvariations        ProductVariationAttribute[]
}

model attributeValuePricing {
  pricing_id        Int            @id @default(autoincrement())
  name              String         @unique
  attributeValue_id Int
  price             Float
  base_q            Float
  unit              String
  purity            String?
  attributeValue    AttributeValue @relation(fields: [attributeValue_id], references: [id])
}

model PricingHistory {
  pricingHistory_id Int      @id @default(autoincrement())
  date              String   @unique
  karat24           Float
  karat22           Float
  karat21           Float
  karat14           Float
  karat09           Float
  silver            Float
  platinum          Float
  palladium         Float
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  karat18           Float
}

model Collection {
  collection_id Int                 @id @default(autoincrement())
  name          String              @unique
  description   String?
  products      ProductCollection[]
}

model ProductCollection {
  collection_id Int
  product_id    Int
  collection    Collection @relation(fields: [collection_id], references: [collection_id])
  product       Product    @relation(fields: [product_id], references: [product_id])

  @@id([collection_id, product_id])
}

model Pattern {
  pattern_id  Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  products    ProductPatten[]
}

model ProductPatten {
  pattern_id Int
  product_id Int
  pattern    Pattern @relation(fields: [pattern_id], references: [pattern_id])
  product    Product @relation(fields: [product_id], references: [product_id])

  @@id([pattern_id, product_id])
}

model State {
  state_id   Int            @id @default(autoincrement())
  name       String         @unique
  country_id Int
  products   ProductState[]
  country    Country        @relation(fields: [country_id], references: [country_id], onDelete: Cascade)
}

model ProductState {
  state_id   Int
  product_id Int
  product    Product @relation(fields: [product_id], references: [product_id])
  state      State   @relation(fields: [state_id], references: [state_id])

  @@id([state_id, product_id])
}

model Gender {
  gender_id Int             @id @default(autoincrement())
  name      String          @unique
  products  ProductGender[]
}

model ProductGender {
  gender_id  Int
  product_id Int
  gender     Gender  @relation(fields: [gender_id], references: [gender_id])
  product    Product @relation(fields: [product_id], references: [product_id])

  @@id([gender_id, product_id])
}

model Characteristic {
  chars_id     Int            @id @default(autoincrement())
  name         String
  chars_type   CharsType
  image        String?
  productChars ProductChars[]
}

model ProductChars {
  chars_id       Int
  product_id     Int
  characteristic Characteristic @relation(fields: [chars_id], references: [chars_id])
  product        Product        @relation(fields: [product_id], references: [product_id])

  @@id([chars_id, product_id])
}

model ProductVariation {
  variation_id              Int                         @id @default(autoincrement())
  product_id                Int
  description               String
  sku                       String                      @unique
  stock_management          Boolean                     @default(false)
  stock_status              Boolean                     @default(false)
  quantity                  Int?
  length                    Float
  height                    Float
  width                     Float
  thickness                 Float
  weight_unit               String
  net_weight                Float?
  gross_weight              Float?
  isPriceFixed              Boolean                     @default(false)
  making_charges            String
  other_charges             String?
  regular_price             Float
  selling_price             Float?
  variation_name            String
  isDiscount                Boolean                     @default(false)
  variation_discount        Float?
  variation_discount_type   Int?
  shipping_charge           Float?
  cartItems                 CartItem[]
  gemstoneProductVariations GemstoneProductVariation[]
  image                     Image[]
  orderItems                OrderItem[]
  product                   Product                     @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  productAttributeValues    ProductVariationAttribute[]
}

model Image {
  image_id         Int               @id @default(autoincrement())
  path             String
  image_type       String
  variation_id     Int?
  user_id          String?           @unique
  banner_user_id   String?           @unique
  category_id      Int?              @unique
  review_id        Int?
  pod_id           Int?
  category         Category?         @relation(fields: [category_id], references: [category_id], onDelete: Cascade)
  productOnDemand  ProductOnDemand?  @relation(fields: [pod_id], references: [id], onDelete: Cascade)
  review           Review?           @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user             User?             @relation("UserImage",fields: [user_id], references: [id], onDelete: Cascade)
  banner           User?             @relation("BannerUserImage",fields: [banner_user_id], references: [id], onDelete: Cascade)
  productvariation ProductVariation? @relation(fields: [variation_id], references: [variation_id], onDelete: Cascade)
}

model Gemstone {
  gemstone_id               Int                        @id @default(autoincrement())
  name                      String                     @unique
  description               String?
  gemstoneProductVariations GemstoneProductVariation[]
}

model GemstoneProductVariation {
  gemstone_id  Int
  variation_id Int
  gemstone     Gemstone         @relation(fields: [gemstone_id], references: [gemstone_id])
  variation    ProductVariation @relation(fields: [variation_id], references: [variation_id])

  @@id([gemstone_id, variation_id])
}

model ProductVariationAttribute {
  productVariation_id      Int
  productAttributeValue_id Int
  productAttributeValue    ProductAttributeValue @relation(fields: [productAttributeValue_id], references: [productAttributeValue_id])
  productvariation         ProductVariation      @relation(fields: [productVariation_id], references: [variation_id])

  @@id([productVariation_id, productAttributeValue_id])
}

model Cart {
  cart_id       Int        @id @default(autoincrement())
  user_id       String     @unique
  cart_total    Float
  discount_type String
  discount      Float
  user          User       @relation(fields: [user_id], references: [id])
  cartItems     CartItem[]
}

model CartItem {
  cartItem_id      Int              @id @default(autoincrement())
  cart_id          Int
  variation_id     Int
  price            Float
  quantity         Int
  cart             Cart             @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  productVariation ProductVariation @relation(fields: [variation_id], references: [variation_id], onDelete: Cascade)
}

model OtpVerification {
  id           Int      @id @default(autoincrement())
  email        String?  @unique
  phone_number String?  @unique
  otp          String
  mode         String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  expiry       BigInt

  @@unique([email, phone_number])
}

model Order {
  id                 Int                   @id @default(autoincrement())
  shippingAddress    String
  billingAddress     String
  paymentMethod      String
  status             OrderStatus           @default(PENDING)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  userId             String
  paymentResponse    String?
  orderDiscount      Float                 @default(0)
  orderDiscountTitle String?
  orderTotal         Float                 @default(0)
  paidAmount         Float                 @default(0)
  cancelNote         String?
  logs               Logs[]
  user               User                  @relation("buyerOrders", fields: [userId], references: [id])
  orderItems         OrderItem[]
  seller             OrderSellerRelation[]
  support            Support[]
}

model OrderSellerRelation {
  order_id Int
  user_id  String
  order    Order  @relation(fields: [order_id], references: [id])
  user     User   @relation(fields: [user_id], references: [id])

  @@id([order_id, user_id])
}

model OrderItem {
  id                 Int              @id @default(autoincrement())
  name               String
  quantity           Int
  price              Float
  variationData      String
  orderId            Int
  productVariationId Int
  discount           Float            @default(0)
  discountTitle      String?
  sellerId           String?
  order              Order            @relation(fields: [orderId], references: [id])
  productVariation   ProductVariation @relation(fields: [productVariationId], references: [variation_id])
}

model Review {
  id             Int          @id @default(autoincrement())
  rating         Int
  text           String?
  createdAt      DateTime     @default(now())
  userId         String?
  productId      Int?
  fromUserId     String
  recommandation String?
  status         ReviewStatus @default(PUBLISHED)
  replay         String?
  images         Image[]
  fromUser       User         @relation("myreviews", fields: [fromUserId], references: [id])
  product        Product?     @relation(fields: [productId], references: [product_id])
  user           User?        @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  product   Product @relation(fields: [productId], references: [product_id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    String
  productId Int
  product   Product @relation(fields: [productId], references: [product_id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model ProductOnDemand {
  id          Int       @id @default(autoincrement())
  userId      String
  name        String
  description String?
  metal_type  String
  karat       String?
  weight_type String
  min_weight  String?
  max_weight  String?
  price_type  String
  min_price   Float?
  max_price   Float?
  made_in     String
  contact     String
  Status      PODStatus @default(DRAFT)
  Note        String?
  createdAt   DateTime  @default(now())
  Images      Image[]
  user        User      @relation(fields: [userId], references: [id])
}

model Logs {
  id        Int      @id @default(autoincrement())
  type      LOGTYPES @default(LOG)
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   Int?
  order     Order?   @relation(fields: [orderId], references: [id])
}

model HomeSlider {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image_url   String
  link_url    String
  createdAt   DateTime @default(now())
}

model Promotional {
  ads_id      Int      @id @default(autoincrement())
  ads_title   String
  ads_desc    String
  ads_link    String
  ads_img_url String
  ads_type    adsType
  createdAt   DateTime @default(now())
}

enum AcountType {
  CUSTOMER
  ADMIN
  VENDOR
}

enum OrderStatus {
  PENDING
  OUTOFSTOCK
  USERCANCELLED
  SELLERCANCELLED
  PROCESSING
  PACKED
  SHIPPED
  OUTFORDELIVERY
  DELIVERED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

enum ReviewStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PODStatus {
  DRAFT
  REQUESTED
  PUBLISHED
  ACCEPTEDBYSELLER
  SOLD
  CANCELED
  ARCHIVED
}

enum SUPPORTStatus {
  INQUIRIES
  COMPLAINTS
  RETURNS
}

enum LOGTYPES {
  LOG
  SUCCESS
  ERROR
  DEV
}

enum CharsType {
  BRAND
  STYLE
  THEME
  TREND
}

enum adsType {
  HOME
  POD
  SHOP
  STORE
  HOME_B
  CART
  WISHLIST
}

enum AddressType {
  BILLING
  SHIPPING
  OTHER
}
